package Jenkins::i18n::ProcOpts;

use 5.014004;
use strict;
use warnings;
use Hash::Util qw(lock_hash);
use Carp qw(confess);

our $VERSION = '0.01';

=pod

=head1 NAME

Jenkins::i18n::ProcOpts - process files definitions based on CLI options

=head1 SYNOPSIS

  use Jenkins::i18n::ProcOpts;

=head1 DESCRIPTION

This module define how the translation files should be processed based on the
collected CLI options.

=head2 EXPORT

None by default.

=head1 METHODS

=head2 new

Creates a new instance.

Expects as positional parameters:

=over

=item 1

A string representing the path where the files should be reviewed.

=item 2

A string representing the path where the processed files should be written to.

=item 3

A boolean (in Perl terms) if a counter is to be used.

=item 4

A boolean (in Perl terms) if deprecated files should be removed.

=item 5

A boolean (in Perl terms) if new files should be added.

=item 6

A boolean (in Perl terms) if CLI is running in debug mode.

=back

=cut

sub new {
    my (
        $class,     $source_dir, $target_dir, $use_counter,
        $is_remove, $is_add,     $is_debug
    ) = @_;
    my $self = {
        source_dir  => $source_dir,
        target_dir  => $target_dir,
        use_counter => $use_counter,
        is_remove   => $is_remove,
        is_add      => $is_add,
        is_debug    => $is_debug,
        counter     => 0,
    };
    confess
'Removing or adding translation files are excluding operations, they cannot be both true at the same time'
        if ( $is_remove and $is_add );
    bless $self, $class;
    lock_hash( %{$self} );
    return $self;
}

=head2 inc

Increments the processed files counter.

=cut

sub inc {
    my $self = shift;
    $self->{counter}++;
}

=head2 use_counter

Returns true (1) or false (0) if the counter usage is in place.

=cut

sub use_counter {
    my $self = shift;
    return $self->{use_counter};
}

=head2 counter

Returns an integer representing the number translation files already processed.

=cut

sub counter {
    my $self = shift;
    return $self->{counter};
}

=head2 is_remove

Returns true (1) or false (0) if the outdated translation files should be
removed.

=cut

sub is_remove {
    my $self = shift;
    return $self->{is_remove};
}

=head2 is_add

Returns true (1) or false (0) if the translation files should be added.

=cut

sub is_add {
    my $self = shift;
    return $self->{is_add};
}

=head2 is_debug

Returns true (1) or false (0) if the CLI is running in debug mode.

=cut

sub is_debug {
    my $self = shift;
    return $self->{is_debug};
}

1;
__END__

=head1 AUTHOR

Alceu Rodrigues de Freitas Junior, E<lt>arfreitas@cpan.orgE<gt>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2022 of Alceu Rodrigues de Freitas Junior,
E<lt>arfreitas@cpan.orgE<gt>

This file is part of Jenkins Translation Tool project.

Jenkins Translation Tool is free software: you can redistribute it and/or
modify it under the terms of the GNU General Public License as published by the
Free Software Foundation, either version 3 of the License, or (at your option)
any later version.

Jenkins Translation Tool is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
details.

You should have received a copy of the GNU General Public License along with
Jenkins Translation Tool. If not, see (http://www.gnu.org/licenses/).

The original `translation-tool.pl` script was licensed through the MIT License,
copyright (c) 2004-, Kohsuke Kawaguchi, Sun Microsystems, Inc., and a number of
other of contributors. Translations files generated by the Jenkins Translation
Tool CLI are distributed with the same MIT License.

=cut
